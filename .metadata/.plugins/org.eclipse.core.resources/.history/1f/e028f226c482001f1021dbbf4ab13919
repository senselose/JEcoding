package Test;

public class kakao_mmobility_3 {
	public static void main(String[] args) {
		int[] distance1 = {2, 5};
        String[] trash1 = {"ABA", "C"};
        System.out.println(minimumCollectionTime(distance1, trash1)); // 15

        int[] distance2 = {3, 2, 4};
        String[] trash2 = {"CAC", "", "B"};
        System.out.println(minimumCollectionTime(distance2, trash2)); // 19
    }

    public static int minimumCollectionTime(int[] distance, String[] trash) {
        int[] lastHouseForTruck = new int[3]; // 0:A, 1:B, 2:C
        int[] trashCount = new int[3]; // 0:A, 1:B, 2:C
        
        // 각 트럭(A, B, C)이 방문해야 할 마지막 집을 찾고, 해당 트럭이 수거할 쓰레기 개수를 계산
        for (int i = 0; i < trash.length; i++) {
            String currentTrash = trash[i];
            if (currentTrash.contains("A")) {
                lastHouseForTruck[0] = i; // A 트럭이 방문해야 할 마지막 집
                trashCount[0] += countTrash(currentTrash, 'A'); // A 트럭이 수거할 쓰레기 개수
            }
            if (currentTrash.contains("B")) {
                lastHouseForTruck[1] = i; // B 트럭이 방문해야 할 마지막 집
                trashCount[1] += countTrash(currentTrash, 'B'); // B 트럭이 수거할 쓰레기 개수
            }
            if (currentTrash.contains("C")) {
                lastHouseForTruck[2] = i; // C 트럭이 방문해야 할 마지막 집
                trashCount[2] += countTrash(currentTrash, 'C'); // C 트럭이 수거할 쓰레기 개수
            }
        }

        // 각 트럭(A, B, C)의 이동 시간과 쓰레기 수거 시간 계산
        int[] totalTime = new int[3]; // 각 트럭의 총 걸린 시간 저장

        for (int truck = 0; truck < 3; truck++) {
            int lastHouse = lastHouseForTruck[truck];
            if (lastHouse == 0 && trashCount[truck] == 0) {
                continue; // 트럭이 갈 필요가 없으면 시간은 0
            }
            
            // 트럭이 마지막 집까지 갔다가 돌아오는 데 걸리는 이동 시간 계산
            int travelTime = 0;
            for (int i = 0; i < lastHouse; i++) {
                travelTime += distance[i] * 2; // 왕복이므로 2배씩 이동 시간 더함
            }
            travelTime += (lastHouse == 0 ? 0 : distance[lastHouse - 1]); // 마지막 집까지 가는 시간만 더함

            // 쓰레기 수거 시간(1분 * 쓰레기 수) 더하기
            int collectionTime = trashCount[truck];

            // 총 시간 = 이동 시간 + 수거 시간
            totalTime[truck] = travelTime + collectionTime;
        }

        // 가장 오래 걸린 시간을 반환
        return Math.max(totalTime[0], Math.max(totalTime[1], totalTime[2]));
    }

    // 특정 쓰레기 종류의 개수를 세는 메서드
    private static int countTrash(String trash, char type) {
        int count = 0;
        for (char c : trash.toCharArray()) {
            if (c == type) {
                count++;
            }
        }
        return count;
		
		
	}
}
